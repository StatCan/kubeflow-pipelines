{
    "aRecurringRun": "a recurring run",
    "aRun": "a run",
    "cannotStartRun": "Cannot start run without pipeline version",
    "catchup": "Catchup",
    "catchupHelpText1": "Whether the recurring run should catch up if behind schedule. Defaults to true.",
    "catchupHelpText2": "For example, if the recurring run is paused for a while and re-enabled afterwards. If catchup=true, the scheduler will catch up on (backfill) each missed interval. Otherwise, it only schedules the latest interval if more than one interval is ready to be scheduled.",
    "catchupHelpText3": "Usually, if your pipeline handles backfill internally, you should turn catchup off to avoid duplicate backfill.",
    "chooseExperiment": "Choose an experiment",
    "choosePipelineVersion": "Choose a pipeline version",
    "chooseTriggerMethod": "Choose a method by which new runs will be triggered",
    "clonedRunDetails": "Could not get cloned run details",
    "clonedRunPipelineDef": "Could not find the cloned run's pipeline definition.",
    "closeJsonEditor": "Close Json Editor",
    "cronExpression": "cron expression",
    "editingCronExpression": "Allow editing cron expression. ( format is specified",
    "endDateBeforeStartDate": "End date/time cannot be earlier than start date/time",
    "errorFindPipeline": "Error: failed to find a pipeline corresponding to that of the original run:",
    "errorFindPipelineVersion": "Error: failed to find a pipeline version corresponding to that of the original run:",
    "errorParsePipeline": "Error: failed to parse the embedded pipeline's spec",
    "errorReadPipelineDef": "Error: failed to read the clone run's pipeline definition.",
    "errorRetrieveExperiment": "Error: failed to retrieve associated experiment",
    "errorRetrieveOrigRun": "Error: failed to retrieve original run",
    "errorRetrievePipeline": "Error: failed to retrieve pipeline",
    "errorRetrievePipelineVersion": "Error: failed to retrieve pipeline version",
    "errorRetrieveRecurrRun": "Error: failed to retrieve original recurring run",
    "errorRetrieveSpecRun": "Error: failed to retrieve the specified run",
    "errorRun": "Error: run",
    "errorRunProvided": "Error: somehow the run provided in the query params",
    "experimentCreationFailed": "Experiment creation failed",
    "experimentDefinition": "Think of an Experiment as a space that contains the history of all pipelines and their associated runs",
    "experimentDetails": "Experiment details",
    "experimentListError": "Error: failed to retrieve list of experiments.",
    "experimentName": "Experiment name",
    "experimentNameRequired": "Experiment name is required",
    "extraPermissionsRequired": "and extra permissions the specific task requires.",
    "filterExperiments": "Filter experiments",
    "filterPipelineVersions": "Filter pipeline versions",
    "hasEndDate": "Has end date",
    "hasStartDate": "Has start date",
    "last5Runs": "Last 5 runs",
    "last5RunsFailed": "Failed to load the last 5 runs of this experiment",
    "maxConcurrentRuns": "Maximum concurrent runs",
    "maxConcurrentRunsPositive": "For triggered runs, maximum concurrent runs must be a positive number",
    "minPermissionsArgoWorkflow": "minimum permissions required by argo workflows",
    "newExperiment": "New experiment",
    "newExperimentSuccess": "Successfully created new Experiment",
    "noEmbeddedPipeline": "had no embedded pipeline",
    "noExperimentsFound": "No experiments found. Click \"Create experiment\" to start.",
    "noExperimentsFoundTryAgain": "No experiments found. Create an experiment and then try again.",
    "noParams": "This pipeline has no parameters",
    "noPipelineVersionsFoundTryAgain": "No pipeline versions found. Select or upload a pipeline then try again.",
    "noteAccountNeeds": "Note, the service account needs",
    "noteStartEndDateCron": "Note: Start and end dates/times are handled outside of cron.",
    "noWorkflowManifest": "had no workflow manifest",
    "oneOff": "One-off",
    "openJsonEditor": "Open Json Editor",
    "parametersAppearSelectPipeline": "Parameters will appear after you select a pipeline",
    "parametersMissingValues": "Some parameters are missing values",
    "parseTriggerFailed": "Failed to parse original trigger",
    "pipelineVersion": "Pipeline Version",
    "pipelineVersionSelected": "A pipeline version must be selected",
    "recurring": "Recurring",
    "recurringRunName": "Recurring run config name",
    "runAssociatedWithExperiment": "This run will be associated with the following experiment",
    "runCreationFailed": "Run creation failed",
    "runDetails": "Run details",
    "runEvery": "Run every",
    "runName": "Run name",
    "runNameRequired": "Run name is required",
    "runParams": "Run parameters",
    "runStatusError": "Error: failed to retrieve run statuses for experiment",
    "runTrigger": "Run trigger",
    "runType": "Run Type",
    "runUsesKubernetesAccount": "This run will use the following Kubernetes service account.",
    "serviceAccountOptional": "Service Account (Optional)",
    "skipStep": "Skip this step",
    "specifyParams": "Specify parameters required by the pipeline",
    "startNewRun": "Start a new run",
    "startNewRunSuccess": "Successfully started new Run",
    "startRecurringRun": "Start a recurring run",
    "triggerType": "Trigger type",
    "useExperiment": "Use this experiment",
    "usePipelineClonedRun": "Using pipeline from cloned run",
    "usePipelinePrevPage": "Using pipeline from previous page",
    "usePipelineVersion": "Use this pipeline version",
    "viewPipeline": "View pipeline"
}