// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Trigger enables a single day on click 1`] = `
<div>
  <Input
    label="triggerType"
    onChange={[Function]}
    required={true}
    select={true}
    value={1}
    variant="outlined"
  >
    <WithStyles(MenuItem)
      key="0"
      value={0}
    >
      triggerTypeEnum.periodic
    </WithStyles(MenuItem)>
    <WithStyles(MenuItem)
      key="1"
      value={1}
    >
      triggerTypeEnum.cron
    </WithStyles(MenuItem)>
  </Input>
  <div>
    <Input
      label="maxConcurrentRuns"
      onChange={[Function]}
      required={true}
      value="10"
      variant="outlined"
    />
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label="hasStartDate"
      />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="startDate"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="date"
        value="2018-12-21"
        variant="outlined"
        width={160}
      />
      <Separator />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="startTime"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="time"
        value="07:53"
        variant="outlined"
        width={120}
      />
    </div>
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label="hasEndDate"
      />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="endDate"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="date"
        value="2018-12-28"
        variant="outlined"
        width={160}
      />
      <Separator />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="endTime"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="time"
        value="07:53"
        variant="outlined"
        width={120}
      />
    </div>
    <span
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={true}
            color="primary"
            onClick={[Function]}
          />
        }
        label="catchup"
      />
      <HelpButton
        helpText={
          <div>
            <p>
              catchupHelpText1
            </p>
            <p>
              catchupHelpText2
            </p>
            <p>
              catchupHelpText3
            </p>
          </div>
        }
      />
    </span>
    <span
      className="flex"
    >
      runEvery
      <Separator />
      <Input
        height={30}
        onChange={[Function]}
        required={true}
        select={true}
        value="experiments:periodicIntervalEnum.week"
        variant="outlined"
        width={95}
      >
        <WithStyles(MenuItem)
          key="0"
          value="experiments:periodicIntervalEnum.minute"
        >
          periodicIntervalEnum.minute
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="1"
          value="experiments:periodicIntervalEnum.hour"
        >
          periodicIntervalEnum.hour
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="2"
          value="experiments:periodicIntervalEnum.day"
        >
          periodicIntervalEnum.day
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="3"
          value="experiments:periodicIntervalEnum.week"
        >
          periodicIntervalEnum.week
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="4"
          value="experiments:periodicIntervalEnum.month"
        >
          periodicIntervalEnum.month
        </WithStyles(MenuItem)>
      </Input>
    </span>
  </div>
  <div>
    <div>
      <span>
        on
        :
      </span>
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label="all"
      />
      <Separator />
      <WithStyles(Button)
        color="primary"
        key="0"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        S
      </WithStyles(Button)>
      <WithStyles(Button)
        color="secondary"
        key="1"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        M
      </WithStyles(Button)>
      <WithStyles(Button)
        color="primary"
        key="2"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        T
      </WithStyles(Button)>
      <WithStyles(Button)
        color="secondary"
        key="3"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        W
      </WithStyles(Button)>
      <WithStyles(Button)
        color="primary"
        key="4"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        T
      </WithStyles(Button)>
      <WithStyles(Button)
        color="primary"
        key="5"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        F
      </WithStyles(Button)>
      <WithStyles(Button)
        color="primary"
        key="6"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        S
      </WithStyles(Button)>
    </div>
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label={
          <span>
            editingCronExpression
             
            <a
              href="https://godoc.org/github.com/robfig/cron#hdr-CRON_Expression_Format"
            >
              here
            </a>
            )
          </span>
        }
      />
    </div>
    <Input
      disabled={true}
      label="cronExpression"
      onChange={[Function]}
      value="0 0 0 ? * 0,2,4,5,6"
      variant="outlined"
      width={300}
    />
    <div>
      noteStartEndDateCron
    </div>
  </div>
</div>
`;

exports[`Trigger renders all week days enabled 1`] = `
<div>
  <Input
    label="triggerType"
    onChange={[Function]}
    required={true}
    select={true}
    value={1}
    variant="outlined"
  >
    <WithStyles(MenuItem)
      key="0"
      value={0}
    >
      triggerTypeEnum.periodic
    </WithStyles(MenuItem)>
    <WithStyles(MenuItem)
      key="1"
      value={1}
    >
      triggerTypeEnum.cron
    </WithStyles(MenuItem)>
  </Input>
  <div>
    <Input
      label="maxConcurrentRuns"
      onChange={[Function]}
      required={true}
      value="10"
      variant="outlined"
    />
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label="hasStartDate"
      />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="startDate"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="date"
        value="2018-12-21"
        variant="outlined"
        width={160}
      />
      <Separator />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="startTime"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="time"
        value="07:53"
        variant="outlined"
        width={120}
      />
    </div>
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label="hasEndDate"
      />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="endDate"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="date"
        value="2018-12-28"
        variant="outlined"
        width={160}
      />
      <Separator />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="endTime"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="time"
        value="07:53"
        variant="outlined"
        width={120}
      />
    </div>
    <span
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={true}
            color="primary"
            onClick={[Function]}
          />
        }
        label="catchup"
      />
      <HelpButton
        helpText={
          <div>
            <p>
              catchupHelpText1
            </p>
            <p>
              catchupHelpText2
            </p>
            <p>
              catchupHelpText3
            </p>
          </div>
        }
      />
    </span>
    <span
      className="flex"
    >
      runEvery
      <Separator />
      <Input
        height={30}
        onChange={[Function]}
        required={true}
        select={true}
        value="experiments:periodicIntervalEnum.week"
        variant="outlined"
        width={95}
      >
        <WithStyles(MenuItem)
          key="0"
          value="experiments:periodicIntervalEnum.minute"
        >
          periodicIntervalEnum.minute
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="1"
          value="experiments:periodicIntervalEnum.hour"
        >
          periodicIntervalEnum.hour
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="2"
          value="experiments:periodicIntervalEnum.day"
        >
          periodicIntervalEnum.day
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="3"
          value="experiments:periodicIntervalEnum.week"
        >
          periodicIntervalEnum.week
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="4"
          value="experiments:periodicIntervalEnum.month"
        >
          periodicIntervalEnum.month
        </WithStyles(MenuItem)>
      </Input>
    </span>
  </div>
  <div>
    <div>
      <span>
        on
        :
      </span>
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label="all"
      />
      <Separator />
      <WithStyles(Button)
        color="secondary"
        key="0"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        S
      </WithStyles(Button)>
      <WithStyles(Button)
        color="secondary"
        key="1"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        M
      </WithStyles(Button)>
      <WithStyles(Button)
        color="secondary"
        key="2"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        T
      </WithStyles(Button)>
      <WithStyles(Button)
        color="secondary"
        key="3"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        W
      </WithStyles(Button)>
      <WithStyles(Button)
        color="secondary"
        key="4"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        T
      </WithStyles(Button)>
      <WithStyles(Button)
        color="secondary"
        key="5"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        F
      </WithStyles(Button)>
      <WithStyles(Button)
        color="secondary"
        key="6"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        S
      </WithStyles(Button)>
    </div>
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label={
          <span>
            editingCronExpression
             
            <a
              href="https://godoc.org/github.com/robfig/cron#hdr-CRON_Expression_Format"
            >
              here
            </a>
            )
          </span>
        }
      />
    </div>
    <Input
      disabled={true}
      label="cronExpression"
      onChange={[Function]}
      value="0 0 0 ? *"
      variant="outlined"
      width={300}
    />
    <div>
      noteStartEndDateCron
    </div>
  </div>
</div>
`;

exports[`Trigger renders periodic schedule controls for initial render 1`] = `
<div>
  <Input
    label="triggerType"
    onChange={[Function]}
    required={true}
    select={true}
    value={0}
    variant="outlined"
  >
    <WithStyles(MenuItem)
      key="0"
      value={0}
    >
      triggerTypeEnum.periodic
    </WithStyles(MenuItem)>
    <WithStyles(MenuItem)
      key="1"
      value={1}
    >
      triggerTypeEnum.cron
    </WithStyles(MenuItem)>
  </Input>
  <div>
    <Input
      label="maxConcurrentRuns"
      onChange={[Function]}
      required={true}
      value="10"
      variant="outlined"
    />
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label="hasStartDate"
      />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="startDate"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="date"
        value="2018-12-21"
        variant="outlined"
        width={160}
      />
      <Separator />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="startTime"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="time"
        value="07:53"
        variant="outlined"
        width={120}
      />
    </div>
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label="hasEndDate"
      />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="endDate"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="date"
        value="2018-12-28"
        variant="outlined"
        width={160}
      />
      <Separator />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="endTime"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="time"
        value="07:53"
        variant="outlined"
        width={120}
      />
    </div>
    <span
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={true}
            color="primary"
            onClick={[Function]}
          />
        }
        label="catchup"
      />
      <HelpButton
        helpText={
          <div>
            <p>
              catchupHelpText1
            </p>
            <p>
              catchupHelpText2
            </p>
            <p>
              catchupHelpText3
            </p>
          </div>
        }
      />
    </span>
    <span
      className="flex"
    >
      runEvery
      <div
        className="flex"
      >
        <Separator />
        <Input
          error={false}
          height={30}
          onChange={[Function]}
          required={true}
          type="number"
          value={1}
          variant="outlined"
          width={65}
        />
      </div>
      <Separator />
      <Input
        height={30}
        onChange={[Function]}
        required={true}
        select={true}
        value="experiments:periodicIntervalEnum.minute"
        variant="outlined"
        width={95}
      >
        <WithStyles(MenuItem)
          key="0"
          value="experiments:periodicIntervalEnum.minute"
        >
          periodicIntervalEnum.minutes
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="1"
          value="experiments:periodicIntervalEnum.hour"
        >
          periodicIntervalEnum.hours
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="2"
          value="experiments:periodicIntervalEnum.day"
        >
          periodicIntervalEnum.days
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="3"
          value="experiments:periodicIntervalEnum.week"
        >
          periodicIntervalEnum.weeks
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="4"
          value="experiments:periodicIntervalEnum.month"
        >
          periodicIntervalEnum.months
        </WithStyles(MenuItem)>
      </Input>
    </span>
  </div>
</div>
`;

exports[`Trigger renders periodic schedule controls if the trigger type is CRON 1`] = `
<div>
  <Input
    label="triggerType"
    onChange={[Function]}
    required={true}
    select={true}
    value={1}
    variant="outlined"
  >
    <WithStyles(MenuItem)
      key="0"
      value={0}
    >
      triggerTypeEnum.periodic
    </WithStyles(MenuItem)>
    <WithStyles(MenuItem)
      key="1"
      value={1}
    >
      triggerTypeEnum.cron
    </WithStyles(MenuItem)>
  </Input>
  <div>
    <Input
      label="maxConcurrentRuns"
      onChange={[Function]}
      required={true}
      value="10"
      variant="outlined"
    />
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label="hasStartDate"
      />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="startDate"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="date"
        value="2018-12-21"
        variant="outlined"
        width={160}
      />
      <Separator />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="startTime"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="time"
        value="07:53"
        variant="outlined"
        width={120}
      />
    </div>
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label="hasEndDate"
      />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="endDate"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="date"
        value="2018-12-28"
        variant="outlined"
        width={160}
      />
      <Separator />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="endTime"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="time"
        value="07:53"
        variant="outlined"
        width={120}
      />
    </div>
    <span
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={true}
            color="primary"
            onClick={[Function]}
          />
        }
        label="catchup"
      />
      <HelpButton
        helpText={
          <div>
            <p>
              catchupHelpText1
            </p>
            <p>
              catchupHelpText2
            </p>
            <p>
              catchupHelpText3
            </p>
          </div>
        }
      />
    </span>
    <span
      className="flex"
    >
      runEvery
      <Separator />
      <Input
        height={30}
        onChange={[Function]}
        required={true}
        select={true}
        value="experiments:periodicIntervalEnum.minute"
        variant="outlined"
        width={95}
      >
        <WithStyles(MenuItem)
          key="0"
          value="experiments:periodicIntervalEnum.minute"
        >
          periodicIntervalEnum.minute
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="1"
          value="experiments:periodicIntervalEnum.hour"
        >
          periodicIntervalEnum.hour
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="2"
          value="experiments:periodicIntervalEnum.day"
        >
          periodicIntervalEnum.day
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="3"
          value="experiments:periodicIntervalEnum.week"
        >
          periodicIntervalEnum.week
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="4"
          value="experiments:periodicIntervalEnum.month"
        >
          periodicIntervalEnum.month
        </WithStyles(MenuItem)>
      </Input>
    </span>
  </div>
  <div>
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label={
          <span>
            editingCronExpression
             
            <a
              href="https://godoc.org/github.com/robfig/cron#hdr-CRON_Expression_Format"
            >
              here
            </a>
            )
          </span>
        }
      />
    </div>
    <Input
      disabled={true}
      label="cronExpression"
      onChange={[Function]}
      value="0 * * * * ?"
      variant="outlined"
      width={300}
    />
    <div>
      noteStartEndDateCron
    </div>
  </div>
</div>
`;

exports[`Trigger renders week days if the trigger type is CRON and interval is weekly 1`] = `
<div>
  <Input
    label="triggerType"
    onChange={[Function]}
    required={true}
    select={true}
    value={1}
    variant="outlined"
  >
    <WithStyles(MenuItem)
      key="0"
      value={0}
    >
      triggerTypeEnum.periodic
    </WithStyles(MenuItem)>
    <WithStyles(MenuItem)
      key="1"
      value={1}
    >
      triggerTypeEnum.cron
    </WithStyles(MenuItem)>
  </Input>
  <div>
    <Input
      label="maxConcurrentRuns"
      onChange={[Function]}
      required={true}
      value="10"
      variant="outlined"
    />
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label="hasStartDate"
      />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="startDate"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="date"
        value="2018-12-21"
        variant="outlined"
        width={160}
      />
      <Separator />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="startTime"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="time"
        value="07:53"
        variant="outlined"
        width={120}
      />
    </div>
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label="hasEndDate"
      />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="endDate"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="date"
        value="2018-12-28"
        variant="outlined"
        width={160}
      />
      <Separator />
      <Input
        InputLabelProps={
          Object {
            "classes": Object {
              "outlined": "noMargin",
            },
            "shrink": true,
          }
        }
        label="endTime"
        onChange={[Function]}
        style={
          Object {
            "visibility": "hidden",
          }
        }
        type="time"
        value="07:53"
        variant="outlined"
        width={120}
      />
    </div>
    <span
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={true}
            color="primary"
            onClick={[Function]}
          />
        }
        label="catchup"
      />
      <HelpButton
        helpText={
          <div>
            <p>
              catchupHelpText1
            </p>
            <p>
              catchupHelpText2
            </p>
            <p>
              catchupHelpText3
            </p>
          </div>
        }
      />
    </span>
    <span
      className="flex"
    >
      runEvery
      <Separator />
      <Input
        height={30}
        onChange={[Function]}
        required={true}
        select={true}
        value="experiments:periodicIntervalEnum.week"
        variant="outlined"
        width={95}
      >
        <WithStyles(MenuItem)
          key="0"
          value="experiments:periodicIntervalEnum.minute"
        >
          periodicIntervalEnum.minute
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="1"
          value="experiments:periodicIntervalEnum.hour"
        >
          periodicIntervalEnum.hour
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="2"
          value="experiments:periodicIntervalEnum.day"
        >
          periodicIntervalEnum.day
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="3"
          value="experiments:periodicIntervalEnum.week"
        >
          periodicIntervalEnum.week
        </WithStyles(MenuItem)>
        <WithStyles(MenuItem)
          key="4"
          value="experiments:periodicIntervalEnum.month"
        >
          periodicIntervalEnum.month
        </WithStyles(MenuItem)>
      </Input>
    </span>
  </div>
  <div>
    <div>
      <span>
        on
        :
      </span>
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={true}
            color="primary"
            onClick={[Function]}
          />
        }
        label="all"
      />
      <Separator />
      <WithStyles(Button)
        color="primary"
        key="0"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        S
      </WithStyles(Button)>
      <WithStyles(Button)
        color="primary"
        key="1"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        M
      </WithStyles(Button)>
      <WithStyles(Button)
        color="primary"
        key="2"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        T
      </WithStyles(Button)>
      <WithStyles(Button)
        color="primary"
        key="3"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        W
      </WithStyles(Button)>
      <WithStyles(Button)
        color="primary"
        key="4"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        T
      </WithStyles(Button)>
      <WithStyles(Button)
        color="primary"
        key="5"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        F
      </WithStyles(Button)>
      <WithStyles(Button)
        color="primary"
        key="6"
        mini={true}
        onClick={[Function]}
        variant="fab"
      >
        S
      </WithStyles(Button)>
    </div>
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        control={
          <WithStyles(Checkbox)
            checked={false}
            color="primary"
            onClick={[Function]}
          />
        }
        label={
          <span>
            editingCronExpression
             
            <a
              href="https://godoc.org/github.com/robfig/cron#hdr-CRON_Expression_Format"
            >
              here
            </a>
            )
          </span>
        }
      />
    </div>
    <Input
      disabled={true}
      label="cronExpression"
      onChange={[Function]}
      value="0 0 0 ? * *"
      variant="outlined"
      width={300}
    />
    <div>
      noteStartEndDateCron
    </div>
  </div>
</div>
`;
