// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NewRun arriving from pipeline details page indicates that a pipeline is preselected and provides a means of selecting a different pipeline 1`] = `
<div
  className="page"
>
  <div
    className="scrollContainer"
  >
    <div
      className="header"
    >
      Run details
    </div>
    <div>
      <span>
        usePipelinePrevPage
      </span>
      <Link
        replace={false}
        to="/pipelines/details/?fromRun=some-mock-run-id"
      >
        [View pipeline]
      </Link>
    </div>
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "pipelineName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "Description",
              },
              Object {
                "flex": 1,
                "label": "Uploaded on",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="No pipelines found. Upload a pipeline and then try again."
          filterLabel="Filter pipelines"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?fromRun=some-mock-run-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          title="Choose a pipeline"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "Upload pipeline",
                "tooltip": "Upload pipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineSelectionBtn"
          onClick={[Function]}
        >
          Cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineBtn"
          onClick={[Function]}
        >
          Use this pipeline
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineVersionSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "Version name",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "Description",
              },
              Object {
                "flex": 1,
                "label": "Uploaded on",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="No pipeline versions found. Select or upload a pipeline then try again."
          filterLabel="Filter pipeline versions"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?fromRun=some-mock-run-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          title="Choose a pipeline version"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "Upload pipeline",
                "tooltip": "Upload pipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "Experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineVersionSelectionBtn"
          onClick={[Function]}
        >
          Cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineVersionBtn"
          onClick={[Function]}
        >
          Use this pipeline version
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <UploadPipelineDialog
      onClose={[Function]}
      open={false}
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "experimentSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "experimentName",
                "sortKey": "name",
              },
              Object {
                "flex": 2,
                "label": "Description",
              },
              Object {
                "flex": 1,
                "label": "Created at",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="No experiments found. Create an experiment and then try again."
          filterLabel="Filter experiments"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?fromRun=some-mock-run-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          title="Choose an experiment"
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "Experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelExperimentSelectionBtn"
          onClick={[Function]}
        >
          Cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="useExperimentBtn"
          onClick={[Function]}
        >
          Use this experiment
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <Input
      autoFocus={true}
      label="Run name"
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      label="Description (optional)"
      multiline={true}
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div>
      This run will be associated with the following experiment
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="chooseExperimentBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              Choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="Experiment"
      required={true}
      value=""
      variant="outlined"
    />
    <div>
      This run will use the following Kubernetes service account.
       
      <HelpButton
        helpText={
          <div>
            Note, the service account needs
             
            <ExternalLink
              href="https://github.com/argoproj/argo/blob/v2.3.0/docs/workflow-rbac.md"
            >
              minimum permissions required by argo workflows
            </ExternalLink>
             
            and extra permissions the specific task requires.
          </div>
        }
      />
    </div>
    <Input
      label="Service Account (Optional)"
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div
      className="header"
    >
      Run Type
    </div>
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={true}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="oneOffToggle"
      label="One-off"
      onChange={[Function]}
    />
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={false}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="recurringToggle"
      label="Recurring"
      onChange={[Function]}
    />
    <NewRunParameters
      handleParamChange={[Function]}
      initialParams={Array []}
      titleMessage="This pipeline has no parameters"
    />
    <div
      className="flex"
    >
      <BusyButton
        busy={false}
        className="buttonAction"
        disabled={true}
        id="startNewRunBtn"
        onClick={[Function]}
        title="Start"
      />
      <WithStyles(Button)
        id="exitNewRunPageBtn"
        onClick={[Function]}
      >
        Cancel
      </WithStyles(Button)>
      <div
        className=""
        style={
          Object {
            "color": "red",
          }
        }
      >
        Run name is required
      </div>
    </div>
  </div>
</div>
`;

exports[`NewRun changes the exit button's text if query params indicate this is the first run of an experiment 1`] = `
<div
  className="page"
>
  <div
    className="scrollContainer"
  >
    <div
      className="header"
    >
      runDetails
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:pipeline"
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineVersionBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="pipelineVersion"
      required={true}
      value=""
      variant="outlined"
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:pipelineName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="common:noPipelinesFoundTryAgain"
          filterLabel="common:filterPipelines"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id&firstRunInExperiment=1",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="common:choosePipeline"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineBtn"
          onClick={[Function]}
        >
          common:usePipeline
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineVersionSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:versionName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noPipelineVersionsFoundTryAgain"
          filterLabel="filterPipelineVersions"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id&firstRunInExperiment=1",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="choosePipelineVersion"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineVersionSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineVersionBtn"
          onClick={[Function]}
        >
          usePipelineVersion
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <UploadPipelineDialog
      onClose={[Function]}
      open={false}
      t={[Function]}
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "experimentSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "experimentName",
                "sortKey": "name",
              },
              Object {
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:createdAt",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noExperimentsFoundTryAgain"
          filterLabel="filterExperiments"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id&firstRunInExperiment=1",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="chooseExperiment"
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelExperimentSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="useExperimentBtn"
          onClick={[Function]}
        >
          useExperiment
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <Input
      autoFocus={true}
      label="runName"
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      label="common:descriptionOptional"
      multiline={true}
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div>
      runAssociatedWithExperiment
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="chooseExperimentBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:experiment"
      required={true}
      value="some mock experiment name"
      variant="outlined"
    />
    <div>
      runUsesKubernetesAccount
       
      <HelpButton
        helpText={
          <div>
            noteAccountNeeds
             
            <ExternalLink
              href="https://github.com/argoproj/argo/blob/v2.3.0/docs/workflow-rbac.md"
            >
              minPermissionsArgoWorkflow
            </ExternalLink>
             
            extraPermissionsRequired
          </div>
        }
      />
    </div>
    <Input
      label="serviceAccountOptional"
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div
      className="header"
    >
      runType
    </div>
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={true}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="oneOffToggle"
      label="oneOff"
      onChange={[Function]}
    />
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={false}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="recurringToggle"
      label="recurring"
      onChange={[Function]}
    />
    <NewRunParameters
      handleParamChange={[Function]}
      initialParams={Array []}
      t={[Function]}
      titleMessage="parametersAppearSelectPipeline"
    />
    <div
      className="flex"
    >
      <BusyButton
        busy={false}
        className="buttonAction"
        disabled={true}
        id="startNewRunBtn"
        onClick={[Function]}
        title="common:start"
      />
      <WithStyles(Button)
        id="exitNewRunPageBtn"
        onClick={[Function]}
      >
        skipStep
      </WithStyles(Button)>
      <div
        className=""
        style={
          Object {
            "color": "red",
          }
        }
      >
        pipelineVersionSelected
      </div>
    </div>
  </div>
</div>
`;

exports[`NewRun changes title and form if the new run will recur, based on the radio buttons 1`] = `
<div
  className="page"
>
  <div
    className="scrollContainer"
  >
    <div
      className="header"
    >
      Run details
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              Choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="Pipeline"
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineVersionBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              Choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="Pipeline Version"
      required={true}
      value=""
      variant="outlined"
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "pipelineName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "Description",
              },
              Object {
                "flex": 1,
                "label": "Uploaded on",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="No pipelines found. Upload a pipeline and then try again."
          filterLabel="Filter pipelines"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          title="Choose a pipeline"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "Upload pipeline",
                "tooltip": "Upload pipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "Experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineSelectionBtn"
          onClick={[Function]}
        >
          Cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineBtn"
          onClick={[Function]}
        >
          Use this pipeline
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineVersionSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "Version name",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "Description",
              },
              Object {
                "flex": 1,
                "label": "Uploaded on",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="No pipeline versions found. Select or upload a pipeline then try again."
          filterLabel="Filter pipeline versions"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          title="Choose a pipeline version"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "Upload pipeline",
                "tooltip": "Upload pipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "Experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineVersionSelectionBtn"
          onClick={[Function]}
        >
          Cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineVersionBtn"
          onClick={[Function]}
        >
          Use this pipeline version
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <UploadPipelineDialog
      onClose={[Function]}
      open={false}
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "experimentSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "experimentName",
                "sortKey": "name",
              },
              Object {
                "flex": 2,
                "label": "Description",
              },
              Object {
                "flex": 1,
                "label": "Created at",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="No experiments found. Create an experiment and then try again."
          filterLabel="Filter experiments"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          title="Choose an experiment"
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "Experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelExperimentSelectionBtn"
          onClick={[Function]}
        >
          Cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="useExperimentBtn"
          onClick={[Function]}
        >
          Use this experiment
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <Input
      autoFocus={true}
      label="Recurring run config name"
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      label="Description (optional)"
      multiline={true}
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div>
      This run will be associated with the following experiment
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="chooseExperimentBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              Choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="Experiment"
      required={true}
      value="some mock experiment name"
      variant="outlined"
    />
    <div>
      This run will use the following Kubernetes service account.
       
      <HelpButton
        helpText={
          <div>
            Note, the service account needs
             
            <ExternalLink
              href="https://github.com/argoproj/argo/blob/v2.3.0/docs/workflow-rbac.md"
            >
              minimum permissions required by argo workflows
            </ExternalLink>
             
            and extra permissions the specific task requires.
          </div>
        }
      />
    </div>
    <Input
      label="Service Account (Optional)"
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div
      className="header"
    >
      Run Type
    </div>
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={false}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="oneOffToggle"
      label="One-off"
      onChange={[Function]}
    />
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={true}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="recurringToggle"
      label="Recurring"
      onChange={[Function]}
    />
    <div
      className="header"
    >
      runTrigger
    </div>
    <div>
      Choose a method by which new runs will be triggered
    </div>
    <Trigger
      initialProps={
        Object {
          "catchup": true,
          "maxConcurrentRuns": undefined,
          "trigger": undefined,
        }
      }
      onChange={[Function]}
    />
    <NewRunParameters
      handleParamChange={[Function]}
      initialParams={Array []}
      titleMessage="Parameters will appear after you select a pipeline"
    />
    <div
      className="flex"
    >
      <BusyButton
        busy={false}
        className="buttonAction"
        disabled={true}
        id="startNewRunBtn"
        onClick={[Function]}
        title="Start"
      />
      <WithStyles(Button)
        id="exitNewRunPageBtn"
        onClick={[Function]}
      >
        Cancel
      </WithStyles(Button)>
      <div
        className=""
        style={
          Object {
            "color": "red",
          }
        }
      >
        A pipeline version must be selected
      </div>
    </div>
  </div>
</div>
`;

exports[`NewRun changes title and form to default state if the new run is a one-off, based on the radio buttons 1`] = `
<div
  className="page"
>
  <div
    className="scrollContainer"
  >
    <div
      className="header"
    >
      runDetails
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:pipeline"
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineVersionBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="pipelineVersion"
      required={true}
      value=""
      variant="outlined"
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:pipelineName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="common:noPipelinesFoundTryAgain"
          filterLabel="common:filterPipelines"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?recurring=1",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="common:choosePipeline"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineBtn"
          onClick={[Function]}
        >
          common:usePipeline
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineVersionSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:versionName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noPipelineVersionsFoundTryAgain"
          filterLabel="filterPipelineVersions"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?recurring=1",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="choosePipelineVersion"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineVersionSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineVersionBtn"
          onClick={[Function]}
        >
          usePipelineVersion
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <UploadPipelineDialog
      onClose={[Function]}
      open={false}
      t={[Function]}
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "experimentSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "experimentName",
                "sortKey": "name",
              },
              Object {
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:createdAt",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noExperimentsFoundTryAgain"
          filterLabel="filterExperiments"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?recurring=1",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="chooseExperiment"
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelExperimentSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="useExperimentBtn"
          onClick={[Function]}
        >
          useExperiment
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <Input
      autoFocus={true}
      label="runName"
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      label="common:descriptionOptional"
      multiline={true}
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div>
      runAssociatedWithExperiment
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="chooseExperimentBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:experiment"
      required={true}
      value=""
      variant="outlined"
    />
    <div>
      runUsesKubernetesAccount
       
      <HelpButton
        helpText={
          <div>
            noteAccountNeeds
             
            <ExternalLink
              href="https://github.com/argoproj/argo/blob/v2.3.0/docs/workflow-rbac.md"
            >
              minPermissionsArgoWorkflow
            </ExternalLink>
             
            extraPermissionsRequired
          </div>
        }
      />
    </div>
    <Input
      label="serviceAccountOptional"
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div
      className="header"
    >
      runType
    </div>
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={true}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="oneOffToggle"
      label="oneOff"
      onChange={[Function]}
    />
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={false}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="recurringToggle"
      label="recurring"
      onChange={[Function]}
    />
    <NewRunParameters
      handleParamChange={[Function]}
      initialParams={Array []}
      t={[Function]}
      titleMessage="parametersAppearSelectPipeline"
    />
    <div
      className="flex"
    >
      <BusyButton
        busy={false}
        className="buttonAction"
        disabled={true}
        id="startNewRunBtn"
        onClick={[Function]}
        title="common:start"
      />
      <WithStyles(Button)
        id="exitNewRunPageBtn"
        onClick={[Function]}
      >
        common:cancel
      </WithStyles(Button)>
      <div
        className=""
        style={
          Object {
            "color": "red",
          }
        }
      >
        pipelineVersionSelected
      </div>
    </div>
  </div>
</div>
`;

exports[`NewRun fetches the associated pipeline if one is present in the query params 1`] = `
<div
  className="page"
>
  <div
    className="scrollContainer"
  >
    <div
      className="header"
    >
      runDetails
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:pipeline"
      required={true}
      value="original mock pipeline name"
      variant="outlined"
    />
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineVersionBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="pipelineVersion"
      required={true}
      value="original mock pipeline version name"
      variant="outlined"
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:pipelineName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="common:noPipelinesFoundTryAgain"
          filterLabel="common:filterPipelines"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?pipelineId=original-run-pipeline-id&pipelineVersionId=original-run-pipeline-version-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="common:choosePipeline"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineBtn"
          onClick={[Function]}
        >
          common:usePipeline
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineVersionSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:versionName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noPipelineVersionsFoundTryAgain"
          filterLabel="filterPipelineVersions"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?pipelineId=original-run-pipeline-id&pipelineVersionId=original-run-pipeline-version-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="choosePipelineVersion"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineVersionSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineVersionBtn"
          onClick={[Function]}
        >
          usePipelineVersion
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <UploadPipelineDialog
      onClose={[Function]}
      open={false}
      t={[Function]}
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "experimentSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "experimentName",
                "sortKey": "name",
              },
              Object {
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:createdAt",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noExperimentsFoundTryAgain"
          filterLabel="filterExperiments"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?pipelineId=original-run-pipeline-id&pipelineVersionId=original-run-pipeline-version-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="chooseExperiment"
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelExperimentSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="useExperimentBtn"
          onClick={[Function]}
        >
          useExperiment
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <Input
      autoFocus={true}
      label="runName"
      onChange={[Function]}
      required={true}
      value="Run of original mock pipeline version name (88888)"
      variant="outlined"
    />
    <Input
      label="common:descriptionOptional"
      multiline={true}
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div>
      runAssociatedWithExperiment
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="chooseExperimentBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:experiment"
      required={true}
      value=""
      variant="outlined"
    />
    <div>
      runUsesKubernetesAccount
       
      <HelpButton
        helpText={
          <div>
            noteAccountNeeds
             
            <ExternalLink
              href="https://github.com/argoproj/argo/blob/v2.3.0/docs/workflow-rbac.md"
            >
              minPermissionsArgoWorkflow
            </ExternalLink>
             
            extraPermissionsRequired
          </div>
        }
      />
    </div>
    <Input
      label="serviceAccountOptional"
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div
      className="header"
    >
      runType
    </div>
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={true}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="oneOffToggle"
      label="oneOff"
      onChange={[Function]}
    />
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={false}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="recurringToggle"
      label="recurring"
      onChange={[Function]}
    />
    <NewRunParameters
      handleParamChange={[Function]}
      initialParams={Array []}
      t={[Function]}
      titleMessage="noParams"
    />
    <div
      className="flex"
    >
      <BusyButton
        busy={false}
        className="buttonAction"
        disabled={false}
        id="startNewRunBtn"
        onClick={[Function]}
        title="common:start"
      />
      <WithStyles(Button)
        id="exitNewRunPageBtn"
        onClick={[Function]}
      >
        common:cancel
      </WithStyles(Button)>
      <div
        className=""
        style={
          Object {
            "color": "red",
          }
        }
      />
    </div>
  </div>
</div>
`;

exports[`NewRun renders the new run page 1`] = `
<div
  className="page"
>
  <div
    className="scrollContainer"
  >
    <div
      className="header"
    >
      runDetails
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:pipeline"
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineVersionBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="pipelineVersion"
      required={true}
      value=""
      variant="outlined"
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:pipelineName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="common:noPipelinesFoundTryAgain"
          filterLabel="common:filterPipelines"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="common:choosePipeline"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineBtn"
          onClick={[Function]}
        >
          common:usePipeline
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineVersionSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:versionName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noPipelineVersionsFoundTryAgain"
          filterLabel="filterPipelineVersions"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="choosePipelineVersion"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineVersionSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineVersionBtn"
          onClick={[Function]}
        >
          usePipelineVersion
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <UploadPipelineDialog
      onClose={[Function]}
      open={false}
      t={[Function]}
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "experimentSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "experimentName",
                "sortKey": "name",
              },
              Object {
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:createdAt",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noExperimentsFoundTryAgain"
          filterLabel="filterExperiments"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="chooseExperiment"
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelExperimentSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="useExperimentBtn"
          onClick={[Function]}
        >
          useExperiment
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <Input
      autoFocus={true}
      label="runName"
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      label="common:descriptionOptional"
      multiline={true}
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div>
      runAssociatedWithExperiment
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="chooseExperimentBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:experiment"
      required={true}
      value="some mock experiment name"
      variant="outlined"
    />
    <div>
      runUsesKubernetesAccount
       
      <HelpButton
        helpText={
          <div>
            noteAccountNeeds
             
            <ExternalLink
              href="https://github.com/argoproj/argo/blob/v2.3.0/docs/workflow-rbac.md"
            >
              minPermissionsArgoWorkflow
            </ExternalLink>
             
            extraPermissionsRequired
          </div>
        }
      />
    </div>
    <Input
      label="serviceAccountOptional"
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div
      className="header"
    >
      runType
    </div>
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={true}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="oneOffToggle"
      label="oneOff"
      onChange={[Function]}
    />
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={false}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="recurringToggle"
      label="recurring"
      onChange={[Function]}
    />
    <NewRunParameters
      handleParamChange={[Function]}
      initialParams={Array []}
      t={[Function]}
      titleMessage="parametersAppearSelectPipeline"
    />
    <div
      className="flex"
    >
      <BusyButton
        busy={false}
        className="buttonAction"
        disabled={true}
        id="startNewRunBtn"
        onClick={[Function]}
        title="common:start"
      />
      <WithStyles(Button)
        id="exitNewRunPageBtn"
        onClick={[Function]}
      >
        common:cancel
      </WithStyles(Button)>
      <div
        className=""
        style={
          Object {
            "color": "red",
          }
        }
      >
        pipelineVersionSelected
      </div>
    </div>
  </div>
</div>
`;

exports[`NewRun starting a new recurring run includes additional trigger input fields if run will be recurring 1`] = `
<div
  className="page"
>
  <div
    className="scrollContainer"
  >
    <div
      className="header"
    >
      runDetails
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:pipeline"
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineVersionBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="pipelineVersion"
      required={true}
      value=""
      variant="outlined"
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:pipelineName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="common:noPipelinesFoundTryAgain"
          filterLabel="common:filterPipelines"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?recurring=1",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="common:choosePipeline"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineBtn"
          onClick={[Function]}
        >
          common:usePipeline
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineVersionSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:versionName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noPipelineVersionsFoundTryAgain"
          filterLabel="filterPipelineVersions"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?recurring=1",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="choosePipelineVersion"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineVersionSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineVersionBtn"
          onClick={[Function]}
        >
          usePipelineVersion
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <UploadPipelineDialog
      onClose={[Function]}
      open={false}
      t={[Function]}
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "experimentSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "experimentName",
                "sortKey": "name",
              },
              Object {
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:createdAt",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noExperimentsFoundTryAgain"
          filterLabel="filterExperiments"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?recurring=1",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="chooseExperiment"
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelExperimentSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="useExperimentBtn"
          onClick={[Function]}
        >
          useExperiment
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <Input
      autoFocus={true}
      label="recurringRunName"
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      label="common:descriptionOptional"
      multiline={true}
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div>
      runAssociatedWithExperiment
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="chooseExperimentBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:experiment"
      required={true}
      value=""
      variant="outlined"
    />
    <div>
      runUsesKubernetesAccount
       
      <HelpButton
        helpText={
          <div>
            noteAccountNeeds
             
            <ExternalLink
              href="https://github.com/argoproj/argo/blob/v2.3.0/docs/workflow-rbac.md"
            >
              minPermissionsArgoWorkflow
            </ExternalLink>
             
            extraPermissionsRequired
          </div>
        }
      />
    </div>
    <Input
      label="serviceAccountOptional"
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div
      className="header"
    >
      runType
    </div>
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={false}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="oneOffToggle"
      label="oneOff"
      onChange={[Function]}
    />
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={true}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="recurringToggle"
      label="recurring"
      onChange={[Function]}
    />
    <div
      className="header"
    >
      runTrigger
    </div>
    <div>
      chooseTriggerMethod
    </div>
    <Trigger
      initialProps={
        Object {
          "catchup": true,
          "maxConcurrentRuns": undefined,
          "trigger": undefined,
        }
      }
      onChange={[Function]}
    />
    <NewRunParameters
      handleParamChange={[Function]}
      initialParams={Array []}
      t={[Function]}
      titleMessage="parametersAppearSelectPipeline"
    />
    <div
      className="flex"
    >
      <BusyButton
        busy={false}
        className="buttonAction"
        disabled={true}
        id="startNewRunBtn"
        onClick={[Function]}
        title="common:start"
      />
      <WithStyles(Button)
        id="exitNewRunPageBtn"
        onClick={[Function]}
      >
        common:cancel
      </WithStyles(Button)>
      <div
        className=""
        style={
          Object {
            "color": "red",
          }
        }
      >
        pipelineVersionSelected
      </div>
    </div>
  </div>
</div>
`;

exports[`NewRun starting a new run updates the pipeline params as user selects different pipelines 1`] = `
<div
  className="page"
>
  <div
    className="scrollContainer"
  >
    <div
      className="header"
    >
      runDetails
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:pipeline"
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineVersionBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="pipelineVersion"
      required={true}
      value=""
      variant="outlined"
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:pipelineName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="common:noPipelinesFoundTryAgain"
          filterLabel="common:filterPipelines"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="common:choosePipeline"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineBtn"
          onClick={[Function]}
        >
          common:usePipeline
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineVersionSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:versionName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noPipelineVersionsFoundTryAgain"
          filterLabel="filterPipelineVersions"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="choosePipelineVersion"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineVersionSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineVersionBtn"
          onClick={[Function]}
        >
          usePipelineVersion
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <UploadPipelineDialog
      onClose={[Function]}
      open={false}
      t={[Function]}
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "experimentSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "experimentName",
                "sortKey": "name",
              },
              Object {
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:createdAt",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noExperimentsFoundTryAgain"
          filterLabel="filterExperiments"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="chooseExperiment"
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelExperimentSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="useExperimentBtn"
          onClick={[Function]}
        >
          useExperiment
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <Input
      autoFocus={true}
      label="runName"
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      label="common:descriptionOptional"
      multiline={true}
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div>
      runAssociatedWithExperiment
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="chooseExperimentBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:experiment"
      required={true}
      value="some mock experiment name"
      variant="outlined"
    />
    <div>
      runUsesKubernetesAccount
       
      <HelpButton
        helpText={
          <div>
            noteAccountNeeds
             
            <ExternalLink
              href="https://github.com/argoproj/argo/blob/v2.3.0/docs/workflow-rbac.md"
            >
              minPermissionsArgoWorkflow
            </ExternalLink>
             
            extraPermissionsRequired
          </div>
        }
      />
    </div>
    <Input
      label="serviceAccountOptional"
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div
      className="header"
    >
      runType
    </div>
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={true}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="oneOffToggle"
      label="oneOff"
      onChange={[Function]}
    />
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={false}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="recurringToggle"
      label="recurring"
      onChange={[Function]}
    />
    <NewRunParameters
      handleParamChange={[Function]}
      initialParams={Array []}
      t={[Function]}
      titleMessage="parametersAppearSelectPipeline"
    />
    <div
      className="flex"
    >
      <BusyButton
        busy={false}
        className="buttonAction"
        disabled={true}
        id="startNewRunBtn"
        onClick={[Function]}
        title="common:start"
      />
      <WithStyles(Button)
        id="exitNewRunPageBtn"
        onClick={[Function]}
      >
        common:cancel
      </WithStyles(Button)>
      <div
        className=""
        style={
          Object {
            "color": "red",
          }
        }
      >
        pipelineVersionSelected
      </div>
    </div>
  </div>
</div>
`;

exports[`NewRun starting a new run updates the pipeline params as user selects different pipelines 2`] = `
<div
  className="page"
>
  <div
    className="scrollContainer"
  >
    <div
      className="header"
    >
      runDetails
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:pipeline"
      required={true}
      value="original mock pipeline name"
      variant="outlined"
    />
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineVersionBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="pipelineVersion"
      required={true}
      value="original mock pipeline version name"
      variant="outlined"
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:pipelineName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="common:noPipelinesFoundTryAgain"
          filterLabel="common:filterPipelines"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="common:choosePipeline"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={false}
          id="usePipelineBtn"
          onClick={[Function]}
        >
          common:usePipeline
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineVersionSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:versionName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noPipelineVersionsFoundTryAgain"
          filterLabel="filterPipelineVersions"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="choosePipelineVersion"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineVersionSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={false}
          id="usePipelineVersionBtn"
          onClick={[Function]}
        >
          usePipelineVersion
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <UploadPipelineDialog
      onClose={[Function]}
      open={false}
      t={[Function]}
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "experimentSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "experimentName",
                "sortKey": "name",
              },
              Object {
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:createdAt",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noExperimentsFoundTryAgain"
          filterLabel="filterExperiments"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="chooseExperiment"
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelExperimentSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="useExperimentBtn"
          onClick={[Function]}
        >
          useExperiment
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <Input
      autoFocus={true}
      label="runName"
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      label="common:descriptionOptional"
      multiline={true}
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div>
      runAssociatedWithExperiment
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="chooseExperimentBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:experiment"
      required={true}
      value="some mock experiment name"
      variant="outlined"
    />
    <div>
      runUsesKubernetesAccount
       
      <HelpButton
        helpText={
          <div>
            noteAccountNeeds
             
            <ExternalLink
              href="https://github.com/argoproj/argo/blob/v2.3.0/docs/workflow-rbac.md"
            >
              minPermissionsArgoWorkflow
            </ExternalLink>
             
            extraPermissionsRequired
          </div>
        }
      />
    </div>
    <Input
      label="serviceAccountOptional"
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div
      className="header"
    >
      runType
    </div>
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={true}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="oneOffToggle"
      label="oneOff"
      onChange={[Function]}
    />
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={false}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="recurringToggle"
      label="recurring"
      onChange={[Function]}
    />
    <NewRunParameters
      handleParamChange={[Function]}
      initialParams={
        Array [
          Object {
            "name": "param-1",
            "value": "prefilled value 1",
          },
          Object {
            "name": "param-2",
            "value": "prefilled value 2",
          },
        ]
      }
      t={[Function]}
      titleMessage="specifyParams"
    />
    <div
      className="flex"
    >
      <BusyButton
        busy={false}
        className="buttonAction"
        disabled={true}
        id="startNewRunBtn"
        onClick={[Function]}
        title="common:start"
      />
      <WithStyles(Button)
        id="exitNewRunPageBtn"
        onClick={[Function]}
      >
        common:cancel
      </WithStyles(Button)>
      <div
        className=""
        style={
          Object {
            "color": "red",
          }
        }
      >
        runNameRequired
      </div>
    </div>
  </div>
</div>
`;

exports[`NewRun starting a new run updates the pipeline params as user selects different pipelines 3`] = `
<div
  className="page"
>
  <div
    className="scrollContainer"
  >
    <div
      className="header"
    >
      runDetails
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:pipeline"
      required={true}
      value="original mock pipeline name"
      variant="outlined"
    />
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineVersionBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="pipelineVersion"
      required={true}
      value="original mock pipeline version name"
      variant="outlined"
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:pipelineName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="common:noPipelinesFoundTryAgain"
          filterLabel="common:filterPipelines"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="common:choosePipeline"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={false}
          id="usePipelineBtn"
          onClick={[Function]}
        >
          common:usePipeline
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineVersionSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:versionName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noPipelineVersionsFoundTryAgain"
          filterLabel="filterPipelineVersions"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="choosePipelineVersion"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineVersionSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={false}
          id="usePipelineVersionBtn"
          onClick={[Function]}
        >
          usePipelineVersion
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <UploadPipelineDialog
      onClose={[Function]}
      open={false}
      t={[Function]}
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "experimentSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "experimentName",
                "sortKey": "name",
              },
              Object {
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:createdAt",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noExperimentsFoundTryAgain"
          filterLabel="filterExperiments"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="chooseExperiment"
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelExperimentSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="useExperimentBtn"
          onClick={[Function]}
        >
          useExperiment
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <Input
      autoFocus={true}
      label="runName"
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      label="common:descriptionOptional"
      multiline={true}
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div>
      runAssociatedWithExperiment
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="chooseExperimentBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:experiment"
      required={true}
      value="some mock experiment name"
      variant="outlined"
    />
    <div>
      runUsesKubernetesAccount
       
      <HelpButton
        helpText={
          <div>
            noteAccountNeeds
             
            <ExternalLink
              href="https://github.com/argoproj/argo/blob/v2.3.0/docs/workflow-rbac.md"
            >
              minPermissionsArgoWorkflow
            </ExternalLink>
             
            extraPermissionsRequired
          </div>
        }
      />
    </div>
    <Input
      label="serviceAccountOptional"
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div
      className="header"
    >
      runType
    </div>
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={true}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="oneOffToggle"
      label="oneOff"
      onChange={[Function]}
    />
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={false}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="recurringToggle"
      label="recurring"
      onChange={[Function]}
    />
    <NewRunParameters
      handleParamChange={[Function]}
      initialParams={Array []}
      t={[Function]}
      titleMessage="noParams"
    />
    <div
      className="flex"
    >
      <BusyButton
        busy={false}
        className="buttonAction"
        disabled={true}
        id="startNewRunBtn"
        onClick={[Function]}
        title="common:start"
      />
      <WithStyles(Button)
        id="exitNewRunPageBtn"
        onClick={[Function]}
      >
        common:cancel
      </WithStyles(Button)>
      <div
        className=""
        style={
          Object {
            "color": "red",
          }
        }
      >
        runNameRequired
      </div>
    </div>
  </div>
</div>
`;

exports[`NewRun updates the run's state with the associated experiment if one is present in the query params 1`] = `
<div
  className="page"
>
  <div
    className="scrollContainer"
  >
    <div
      className="header"
    >
      runDetails
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:pipeline"
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="choosePipelineVersionBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="pipelineVersion"
      required={true}
      value=""
      variant="outlined"
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:pipelineName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="common:noPipelinesFoundTryAgain"
          filterLabel="common:filterPipelines"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="common:choosePipeline"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineBtn"
          onClick={[Function]}
        >
          common:usePipeline
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "pipelineVersionSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 2,
                "label": "common:versionName",
                "sortKey": "name",
              },
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:uploadedOn",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noPipelineVersionsFoundTryAgain"
          filterLabel="filterPipelineVersions"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="choosePipelineVersion"
          toolbarActionMap={
            Object {
              "uploadPipeline": Object {
                "action": [Function],
                "icon": [Function],
                "id": "uploadBtn",
                "outlined": true,
                "style": Object {
                  "minWidth": 160,
                },
                "title": "common:uploadPipeline",
                "tooltip": "common:uploadPipeline",
              },
            }
          }
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelPipelineVersionSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="usePipelineVersionBtn"
          onClick={[Function]}
        >
          usePipelineVersion
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <UploadPipelineDialog
      onClose={[Function]}
      open={false}
      t={[Function]}
    />
    <WithStyles(Dialog)
      PaperProps={
        Object {
          "id": "experimentSelectorDialog",
        }
      }
      classes={
        Object {
          "paper": "selectorDialog",
        }
      }
      onClose={[Function]}
      open={false}
    >
      <WithStyles(DialogContent)>
        <ResourceSelector
          columns={
            Array [
              Object {
                "customRenderer": [Function],
                "flex": 1,
                "label": "experimentName",
                "sortKey": "name",
              },
              Object {
                "flex": 2,
                "label": "common:description",
              },
              Object {
                "flex": 1,
                "label": "common:createdAt",
                "sortKey": "created_at",
              },
            ]
          }
          emptyMessage="noExperimentsFoundTryAgain"
          filterLabel="filterExperiments"
          history={
            Object {
              "push": [MockFunction],
              "replace": [MockFunction],
            }
          }
          initialSortColumn="created_at"
          listApi={[Function]}
          location={
            Object {
              "pathname": "/runs/new",
              "search": "?experimentId=some-mock-experiment-id",
            }
          }
          match=""
          selectionChanged={[Function]}
          t={[Function]}
          title="chooseExperiment"
          toolbarProps={
            Object {
              "actions": Object {},
              "breadcrumbs": Array [
                Object {
                  "displayName": "common:experiments",
                  "href": "/experiments",
                },
              ],
              "pageTitle": "startNewRun",
            }
          }
          updateBanner={[MockFunction]}
          updateDialog={[MockFunction]}
          updateSnackbar={[MockFunction]}
          updateToolbar={[MockFunction]}
        />
      </WithStyles(DialogContent)>
      <WithStyles(DialogActions)>
        <WithStyles(Button)
          color="secondary"
          id="cancelExperimentSelectionBtn"
          onClick={[Function]}
        >
          common:cancel
        </WithStyles(Button)>
        <WithStyles(Button)
          color="secondary"
          disabled={true}
          id="useExperimentBtn"
          onClick={[Function]}
        >
          useExperiment
        </WithStyles(Button)>
      </WithStyles(DialogActions)>
    </WithStyles(Dialog)>
    <Input
      autoFocus={true}
      label="runName"
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      label="common:descriptionOptional"
      multiline={true}
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div>
      runAssociatedWithExperiment
    </div>
    <Input
      InputProps={
        Object {
          "classes": Object {
            "disabled": "nonEditableInput",
          },
          "endAdornment": <WithStyles(InputAdornment)
            position="end"
          >
            <WithStyles(Button)
              color="secondary"
              id="chooseExperimentBtn"
              onClick={[Function]}
              style={
                Object {
                  "margin": 0,
                  "padding": "3px 5px",
                }
              }
            >
              common:choose
            </WithStyles(Button)>
          </WithStyles(InputAdornment)>,
          "readOnly": true,
        }
      }
      disabled={true}
      label="common:experiment"
      required={true}
      value="some mock experiment name"
      variant="outlined"
    />
    <div>
      runUsesKubernetesAccount
       
      <HelpButton
        helpText={
          <div>
            noteAccountNeeds
             
            <ExternalLink
              href="https://github.com/argoproj/argo/blob/v2.3.0/docs/workflow-rbac.md"
            >
              minPermissionsArgoWorkflow
            </ExternalLink>
             
            extraPermissionsRequired
          </div>
        }
      />
    </div>
    <Input
      label="serviceAccountOptional"
      onChange={[Function]}
      value=""
      variant="outlined"
    />
    <div
      className="header"
    >
      runType
    </div>
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={true}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="oneOffToggle"
      label="oneOff"
      onChange={[Function]}
    />
    <WithStyles(WithFormControlContext(FormControlLabel))
      checked={false}
      control={
        <WithStyles(Radio)
          color="primary"
        />
      }
      id="recurringToggle"
      label="recurring"
      onChange={[Function]}
    />
    <NewRunParameters
      handleParamChange={[Function]}
      initialParams={Array []}
      t={[Function]}
      titleMessage="parametersAppearSelectPipeline"
    />
    <div
      className="flex"
    >
      <BusyButton
        busy={false}
        className="buttonAction"
        disabled={true}
        id="startNewRunBtn"
        onClick={[Function]}
        title="common:start"
      />
      <WithStyles(Button)
        id="exitNewRunPageBtn"
        onClick={[Function]}
      >
        common:cancel
      </WithStyles(Button)>
      <div
        className=""
        style={
          Object {
            "color": "red",
          }
        }
      >
        pipelineVersionSelected
      </div>
    </div>
  </div>
</div>
`;
